{"version":3,"file":"Logout.container.js","sources":["../src/auth/Logout.js","../src/auth/types.js","../src/auth/actions.js","../src/auth/mutations.js","../src/auth/Logout.container.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Logout.css'\n\nconst Logout = ({tryLogout}) =>\n    <button onClick={tryLogout} className='logoutButton' type='button'>Logout</button>\n\nLogout.propTypes = {\n    tryLogout: PropTypes.func.isRequired\n}\n\nexport default Logout\n","export default {\n    CANCEL: 'awc_cancel',\n    ERROR: 'awc_error',\n    CLEAR_LOGIN: 'awc_clear_login',\n    GOTO_PASSWORD_HELP: 'awc_goto_password_help',\n    GOTO_REGISTRATION: 'awc_goto_registration',\n    GOTO_APP_REGISTRATION: 'awc_goto_app_registration',\n    PASSWORD_HELP: 'awc_password_help',\n    REGISTER_SUPER_USER: 'awc_register_super_user',\n    REGISTER_USER: 'awc_register_user',\n    REGISTER_APP: 'awc_register_app',\n    LOGIN: 'awc_login',\n    LOGOUT: 'awc_logout'\n}\n","import types from './types'\n\nexport const cancel = () =>\n    ({type: types.CANCEL})\nexport const handleError = (error) =>\n    ({error, type: types.ERROR})\nexport const gotoPasswordHelp = () =>\n    ({type: types.GOTO_PASSWORD_HELP})\nexport const gotoRegistration = () =>\n    ({type: types.GOTO_REGISTRATION})\nexport const gotoAppRegistration = () =>\n    ({type: types.GOTO_APP_REGISTRATION})\nexport const passwordHelp = email =>\n    ({email, type: types.PASSWORD_HELP})\nexport const registerUser = user =>\n    ({user, type: types.REGISTER_USER})\nexport const registerSuperUser = user =>\n    ({user, type: types.REGISTER_SUPER_USER})\nexport const registerApp = app =>\n    ({app, type: types.REGISTER_APP})\nexport const login = user =>\n    ({user, type: types.LOGIN})\nexport const logout = () =>\n    ({type: types.LOGOUT})\n","import {gql} from 'react-apollo'\n\nexport const LOGIN_USER = gql`\n    mutation loginUser($email: String!, $password: String!) {\n        loginUser(email: $email, password: $password) {\n            id\n            email\n            is_active\n            last_login\n            roles\n            token {\n                access_token\n                expires_in\n                token_type\n                scope\n                redirect_uri\n            }\n        }\n    }\n`\nexport const LOGOUT_USER = gql`\n    mutation logoutUser($token: String!) {\n        logoutUser(token: $token)\n    }\n`\nexport const PASSWORD_RESET = gql`\n    mutation passwordReset($email: String!) {\n        passwordReset(email: $email)\n    }\n`\nexport const REFRESH_TOKEN = gql`\n    mutation refreshUser($token: String!) {\n        refreshUser(token: $token) {\n            access_token\n            expires_in\n            token_type\n            scope\n        }\n    }\n`\nexport const REGISTER_APP = gql`\n    mutation registerApp($name: String!, $redirectUri: String!) {\n        registerApp(name: $name, redirectUri: $redirectUri) {\n            name\n            redirect_uri\n            client_id\n            client_secret\n        }\n    }\n`\nexport const REGISTER_USER = gql`\n    mutation registerUser($email: String!, $password: String!, $name: String!) {\n        registerUser(email: $email, password: $password, name: $name)\n    }\n`\nexport const REGISTER_SUPER_USER = gql`\n    mutation registerSuperUser($email: String!, $password: String!) {\n        registerSuperUser(email: $email, password: $password)\n    }\n`\n","import {path} from 'ramda'\nimport {graphql} from 'react-apollo'\nimport {connect} from 'react-redux'\n\nimport Logout from './Logout'\nimport {logout} from './actions'\nimport {LOGOUT_USER} from './mutations'\n\nconst LogoutWithData = graphql(LOGOUT_USER, {\n    props: ({mutate, ownProps}) => ({\n        async tryLogout() {\n            const success = await mutate({variables: {token: ownProps.token}})\n            if (success) {\n                ownProps.logoutUser()\n                ownProps.history.push('/login')\n            }\n        }\n    })\n})(Logout)\n\nconst mapStoreToProps = store => ({\n    token: path(['auth', 'user', 'access_token'], store) \n})\n\nconst mapDispatchToProps = dispatch => ({\n    logoutUser(token) {\n        return dispatch(logout(token))\n    }\n})\n\nexport default connect(mapStoreToProps, mapDispatchToProps)(LogoutWithData)\n"],"names":["Logout","tryLogout","propTypes","PropTypes","func","isRequired","logout","type","types","LOGOUT","LOGIN_USER","gql","LOGOUT_USER","PASSWORD_RESET","REFRESH_TOKEN","REGISTER_APP","REGISTER_USER","REGISTER_SUPER_USER","LogoutWithData","graphql","mutate","ownProps","success","variables","token","logoutUser","history","push","mapStoreToProps","path","store","mapDispatchToProps","dispatch","connect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,SAAS,SAATA,MAAS;QAAEC,SAAF,QAAEA,SAAF;WACX;;UAAQ,SAASA,SAAjB,EAA4B,WAAU,cAAtC,EAAqD,MAAK,QAA1D;;KADW;CAAf;;AAGAD,OAAOE,SAAP,GAAmB;eACJC,UAAUC,IAAV,CAAeC;CAD9B;;ACRA,YAAe;YACH,YADG;WAEJ,WAFI;iBAGE,iBAHF;wBAIS,wBAJT;uBAKQ,uBALR;2BAMY,2BANZ;mBAOI,mBAPJ;yBAQU,yBARV;mBASI,mBATJ;kBAUG,kBAVH;WAWJ,WAXI;YAYH;CAZZ;;ACsBO,IAAMC,SAAS,SAATA,MAAS;WACjB,EAACC,MAAMC,MAAMC,MAAb,EADiB;CAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBP,AAEO,IAAMC,aAAaC,GAAb,iBAAN;AAkBP,AAAO,IAAMC,cAAcD,GAAd,kBAAN;AAKP,AAAO,IAAME,iBAAiBF,GAAjB,kBAAN;AAKP,AAAO,IAAMG,gBAAgBH,GAAhB,kBAAN;AAUP,AAAO,IAAMI,eAAeJ,GAAf,kBAAN;AAUP,AAAO,IAAMK,gBAAgBL,GAAhB,kBAAN;AAKP,AAAO,IAAMM,sBAAsBN,GAAtB,kBAAN;;AC/CP,IAAMO,iBAAiBC,QAAQP,WAAR,EAAqB;WACjC;YAAEQ,MAAF,QAAEA,MAAF;YAAUC,QAAV,QAAUA,QAAV;eAAyB;qBAAA,6BACV;oBACRC,UAAU,MAAMF,OAAO,EAACG,WAAW,EAACC,OAAOH,SAASG,KAAjB,EAAZ,EAAP,CAAtB;oBACIF,OAAJ,EAAa;6BACAG,UAAT;6BACSC,OAAT,CAAiBC,IAAjB,CAAsB,QAAtB;;;SALL;;CADY,EAUpB3B,MAVoB,CAAvB;;AAYA,IAAM4B,kBAAkB,SAAlBA,eAAkB;WAAU;eACvBC,KAAK,CAAC,MAAD,EAAS,MAAT,EAAiB,cAAjB,CAAL,EAAuCC,KAAvC;KADa;CAAxB;;AAIA,IAAMC,qBAAqB,SAArBA,kBAAqB;WAAa;kBAAA,sBACzBP,KADyB,EAClB;mBACPQ,SAAS1B,OAAOkB,KAAP,CAAT,CAAP;;KAFmB;CAA3B;;AAMA,uBAAeS,QAAQL,eAAR,EAAyBG,kBAAzB,EAA6Cb,cAA7C,CAAf;;;;"}