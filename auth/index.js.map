{"version":3,"file":"index.js","sources":["../src/auth/apollo.client.js","../src/common/Logo.js","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v4.js","../src/common/FormField.js","../src/auth/Login.js","../src/auth/types.js","../src/auth/actions.js","../src/auth/constants.js","../src/auth/mutations.js","../src/auth/Login.container.js","../src/auth/PasswordHelp.js","../src/auth/PasswordHelp.container.js","../src/auth/Registration.js","../src/auth/Registration.container.js","../src/auth/RegisterApplication.js","../src/auth/RegisterApplication.container.js","../src/auth/Routes.js","../src/auth/Routes.container.js","../src/auth/Auth.js","../src/auth/Auth.container.js","../src/auth/AuthProvider.js","../src/auth/Logout.js","../src/auth/index.js"],"sourcesContent":["import {path} from 'ramda'\nimport {ApolloClient, createNetworkInterface} from 'react-apollo'\nimport {SubscriptionClient, addGraphQLSubscriptions} from 'subscriptions-transport-ws'\n\nexport default ({\n    baseUrl = 'localhost',\n    useSubscriptionsToo = true,\n    parseTokenFromStorage = true\n} = {}) => { \n    const networkInterface = createNetworkInterface({uri: `http://${baseUrl}/graphql`})\n\n    if (parseTokenFromStorage) {\n        networkInterface.use([{\n            applyMiddleware(req, next) {\n                if (!path(['options', 'headers'], req)) {\n                    req.options.headers = {}\n                }\n                req.options.headers['x-token'] = localStorage.getItem('token')\n                next()\n            }\n        }])\n    }\n\n    if (useSubscriptionsToo) {\n        const wsClient = new SubscriptionClient(`ws://${baseUrl}/subscriptions`, {reconnect: true})\n        return new ApolloClient({\n            networkInterface: addGraphQLSubscriptions(networkInterface, wsClient)\n        })\n    }\n\n    return new ApolloClient({networkInterface})\n}\n","import React from 'react'\nimport './Logo.css'\nimport logo from './logo.png'\n\nconst Logo = props =>\n    <img className='attainiaLogo' alt='attainia logo' src={logo.src} {...props} />\n\nexport default Logo\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","/* Not sure when eslint-plugin-react will fix their issue https://github.com/yannickcr/eslint/eslint-plugin-react/issues/1187 */\n/* eslint \"react/jsx-indent-props\": \"off\" */\n\nimport {pickBy, isNil, complement} from 'ramda'\nimport React from 'react'\nimport {Field} from 'redux-form'\nimport PropTypes from 'prop-types'\nimport uuid from 'uuid/v4'\n\nimport './FormField.css'\n\nconst isCheck = type => /checkbox/i.test(type)\nconst isNotNil = complement(isNil)\n\nexport const InputField = props => (\n    /textarea/i.test(props.type) ?\n        <textarea className='formField' {...props} /> :\n        <input checked className='formField' {...props} />\n)\n\nInputField.propTypes = {\n    id: PropTypes.string,\n    label: PropTypes.string,\n    type: PropTypes.oneOf([\n        'checkbox',\n        'color',\n        'date',\n        'email',\n        'month',\n        'number',\n        'password',\n        'radio',\n        'reset',\n        'search',\n        'submit',\n        'tel',\n        'text',\n        'textarea',\n        'url',\n        'week'\n    ])\n}\n\nInputField.defaultProps = {\n    type: 'text'\n}\n\nexport const FormField = ({\n    handlers, input, id, meta: {touched, error}, label, name, placeholder, type, value, className\n}) =>\n    <div className={`formGroup ${className}${isCheck(type) ? ' squareCheckbox' : ''}`}>\n        {label && !isCheck(type) ? <label htmlFor={id}>{label}</label> : null}\n        <InputField {...pickBy(isNotNil, {id, value, type, placeholder, name, ...input, ...handlers})} />\n        {label && isCheck(type) ? <label htmlFor={id}><span>{label}</span></label> : null}\n        {touched && error ? <div className={`${touched && error ? 'fieldError' : ''}`}>{error}</div> : null}\n    </div>\n\nFormField.propTypes = {\n    handlers: PropTypes.shape({\n        onBlur: PropTypes.func,\n        onChange: PropTypes.func,\n        onDragStart: PropTypes.func,\n        onDrop: PropTypes.func,\n        onFocus: PropTypes.func,\n        onUpdate: PropTypes.func\n    }),\n    meta: PropTypes.shape({\n        active: PropTypes.bool,\n        checked: PropTypes.bool,\n        dirty: PropTypes.bool,\n        error: PropTypes.arrayOf(PropTypes.string),\n        invalid: PropTypes.bool,\n        pristine: PropTypes.bool,\n        touched: PropTypes.bool,\n        valid: PropTypes.bool,\n        visited: PropTypes.bool\n    }),\n    className: PropTypes.string,\n    input: PropTypes.element,\n    label: PropTypes.string,\n    name: PropTypes.string,\n    id: PropTypes.string,\n    placeholder: PropTypes.string,\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.number,\n        PropTypes.string\n    ])\n}\n\nFormField.defaultProps = {\n    meta: {},\n    handlers: {}\n}\n\nconst ReduxFormField = props =>\n    <Field\n        name={props.name}\n        component={FormField}\n        {...props}\n    />\n\nReduxFormField.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string\n}\n\nReduxFormField.defaultProps = {\n    id: uuid()\n}\n\nexport default ReduxFormField\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Login.css'\nimport Logo from '../common/Logo'\nimport ReduxFormField from '../common/FormField'\n\nconst Login = ({handleSubmit, tryLogin, email, gotoPasswordHelp, gotoRegistration}) =>\n    <form className='loginForm' onSubmit={handleSubmit(tryLogin)}>\n        <Logo />\n        <ReduxFormField className='email' placeholder='email' name='email' type='email' value={email} />\n        <ReduxFormField className='password' placeholder='password' type='password' name='password' />\n        <ReduxFormField className='rememberMe' label='Remember Me' type='checkbox' name='remember' />\n        <a className='passwordHelp link' href='#' onClick={gotoPasswordHelp}>Password Help</a>\n        <button className='loginButton' type='submit'>Login</button>\n        <a className='register link' href='#' onClick={gotoRegistration}>Need an Account?</a>\n    </form>\n\nLogin.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    tryLogin: PropTypes.func.isRequired,\n    gotoPasswordHelp: PropTypes.func.isRequired,\n    gotoRegistration: PropTypes.func.isRequired,\n    email: PropTypes.string\n}\n\nexport default Login\n","export default {\n    CANCEL: 'awc_cancel',\n    ERROR: 'awc_error',\n    CLEAR_LOGIN: 'awc_clear_login',\n    GOTO_PASSWORD_HELP: 'awc_goto_password_help',\n    GOTO_REGISTRATION: 'awc_goto_registration',\n    GOTO_APP_REGISTRATION: 'awc_goto_app_registration',\n    PASSWORD_HELP: 'awc_password_help',\n    REGISTER_SUPER_USER: 'awc_register_super_user',\n    REGISTER_USER: 'awc_register_user',\n    REGISTER_APP: 'awc_register_app',\n    LOGIN: 'awc_login',\n    LOGOUT: 'awc_logout'\n}\n","import types from './types'\n\nexport const cancel = () =>\n    ({type: types.CANCEL})\nexport const handleError = (error) =>\n    ({error, type: types.ERROR})\nexport const gotoPasswordHelp = () =>\n    ({type: types.GOTO_PASSWORD_HELP})\nexport const gotoRegistration = () =>\n    ({type: types.GOTO_REGISTRATION})\nexport const gotoAppRegistration = () =>\n    ({type: types.GOTO_APP_REGISTRATION})\nexport const passwordHelp = email =>\n    ({email, type: types.PASSWORD_HELP})\nexport const registerUser = user =>\n    ({user, type: types.REGISTER_USER})\nexport const registerSuperUser = user =>\n    ({user, type: types.REGISTER_SUPER_USER})\nexport const registerApp = app =>\n    ({app, type: types.REGISTER_APP})\nexport const login = user =>\n    ({user, type: types.LOGIN})\nexport const logout = () =>\n    ({type: types.LOGOUT})\n","/* eslint \"max-len\": \"off\" */\n\nimport LocalizedStrings from 'react-localization'\n\nconst PASSWORD_PATTERN = new RegExp(/^([A-Z]|[a-z])([a-z]|[0-9]|[!@#$%^&*()[\\];:,.<>?*^+=_-]){6,50}$/)\n\nexport default {\n    PASSWORD_PATTERN,\n    passwordHelp: {\n        messages: new LocalizedStrings({\n            en: {\n                'required.email': 'Please enter your email'\n            },\n            fr: {\n                'required.email': 'Entrez votre adresse e-mail'\n            },\n            es: {\n                'required.email': 'Por favor, introduzca su dirección de correo electrónico'\n            }\n        }),\n        rules: {\n            email: 'required'\n        }\n    },\n    login: {\n        messages: new LocalizedStrings({\n            en: {\n                'required.email': 'Please enter your email',\n                'required.password': 'Please enter your password'\n            },\n            fr: {\n                'required.email': 'Entrez votre adresse e-mail',\n                'required.password': 's\\'il vous plait entrez votre mot de passe'\n            },\n            es: {\n                'required.email': 'Por favor, introduzca su dirección de correo electrónico',\n                'required.password': 'Por favor, introduzca su contraseña'\n            }\n        }),\n        rules: {\n            email: 'required',\n            password: 'required'\n        }\n    },\n    registerApplication: {\n        messages: new LocalizedStrings({\n            en: {\n                'required.name': 'Please enter your name',\n                'required.redirect': 'Please enter a URL'\n            },\n            fr: {\n                'required.name': 'S\\'il vous plaît entrez votre nom',\n                'required.redirect': 'Entrez une URL'\n            },\n            es: {\n                'required.name': 'por favor, escriba su nombre',\n                'required.redirect': 'Ingrese una URL'\n            }\n        }),\n        rules: {\n            name: 'required',\n            redirect: 'required'\n        }\n    },\n    registerUser: {\n        messages: new LocalizedStrings({\n            en: {\n                'required.name': 'Please enter your name',\n                'required.email': 'Please enter your email address',\n                'email.email': 'Invalid email address',\n                'required.password': 'Please enter your password',\n                'regex.password': 'Passwords should be greater than 6 alphanumeric characters. Some special characters are allowed.'\n            },\n            fr: {\n                'required.name': 'S\\'il vous plaît entrez votre nom',\n                'required.email': 'Entrez votre adresse e-mail',\n                'email.email': 'Adresse e-mail invalide',\n                'required.password': 's\\'il vous plait entrez votre mot de passe',\n                'regex.password': 'Les mots de passe doivent être supérieurs à 6 caractères. Algunos caracteres especiales están permitidos.'\n            },\n            es: {\n                'required.name': 'por favor, escriba su nombre',\n                'required.email': 'Por favor, introduzca su dirección de correo electrónico',\n                'email.email': 'Dirección de correo electrónico no válida',\n                'required.password': 'Por favor, introduzca su contraseña',\n                'regex.password': 'Las contraseñas deben tener más de 6 caracteres. Certains caractères spéciaux sont autorisés.'\n            }\n        }),\n        rules: {\n            name: 'required',\n            password: ['required', `regex:${PASSWORD_PATTERN}`],\n            email: 'required|email'\n        }\n    }\n}\n","import {gql} from 'react-apollo'\n\nexport const LOGIN_USER = gql`\n    mutation loginUser($email: String!, $password: String!) {\n        loginUser(email: $email, password: $password) {\n            id\n            email\n            is_active\n            last_login\n            roles\n            token {\n                access_token\n                expires_in\n                token_type\n                scope\n                redirect_uri\n            }\n        }\n    }\n`\nexport const LOGOUT_USER = gql`\n    mutation logoutUser($token: String!) {\n        logoutUser(token: $token)\n    }\n`\nexport const PASSWORD_RESET = gql`\n    mutation passwordReset($email: String!) {\n        passwordReset(email: $email)\n    }\n`\nexport const REFRESH_TOKEN = gql`\n    mutation refreshUser($token: String!) {\n        refreshUser(token: $token) {\n            access_token\n            expires_in\n            token_type\n            scope\n        }\n    }\n`\nexport const REGISTER_APP = gql`\n    mutation registerApp($name: String!, $redirectUri: String!) {\n        registerApp(name: $name, redirectUri: $redirectUri) {\n            name\n            redirect_uri\n            client_id\n            client_secret\n        }\n    }\n`\nexport const REGISTER_USER = gql`\n    mutation registerUser($email: String!, $password: String!, $name: String!) {\n        registerUser(email: $email, password: $password, name: $name)\n    }\n`\nexport const REGISTER_SUPER_USER = gql`\n    mutation registerSuperUser($email: String!, $password: String!) {\n        registerSuperUser(email: $email, password: $password)\n    }\n`\n","import {path, toPairs, without} from 'ramda'\nimport {connect} from 'react-redux'\nimport {reduxForm} from 'redux-form'\nimport {graphql} from 'react-apollo'\nimport Validator from 'validatorjs'\n\nimport Login from './Login'\nimport {handleError, login, gotoRegistration, gotoPasswordHelp} from './actions'\nimport constants from './constants'\nimport {LOGIN_USER} from './mutations'\n\nconst {login: {rules, messages}} = constants\n\nconst validate = (values) => {\n    const validator = new Validator(values, rules, messages)\n    validator.passes()\n    return validator.errors.all()\n}\n\nconst mapStateToProps = state => ({\n    email: path(['auth', 'user', 'email'], state),\n    name: path(['auth', 'user', 'name'], state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    handleError(error) {\n        return dispatch(handleError(error))\n    },\n    login(user) {\n        return dispatch(login(user))\n    },\n    gotoPasswordHelp(e) {\n        e.preventDefault()\n        return dispatch(gotoPasswordHelp())\n    },\n    gotoRegistration(e) {\n        e.preventDefault()\n        return dispatch(gotoRegistration())\n    }\n})\n\nconst FormedLogin = reduxForm({\n    validate,\n    form: 'LoginForm',\n    fields: ['email', 'password']\n})(Login)\n\nconst LoginWithData = graphql(\n    LOGIN_USER, {\n    props: ({ownProps, mutate}) => ({\n        async tryLogin(credentials) {\n            try {\n                const {data: {error, loginUser}} = await mutate({variables: credentials})\n                if (error) {\n                    throw new Error(error)\n                }\n                if (loginUser) {\n                    ownProps.login(loginUser)\n\n                    const {token} = loginUser\n                    if (token.redirect_uri) {\n                        window.location = `${token.redirect_uri}${\n                            token.redirect_uri.includes('?') ? '&' : '?'\n                        }${\n                            toPairs(without('redirect_uri', token)).map(([key, val]) => `${key}=${val}`).join('&')\n                        }`\n                    }\n                }\n            } catch (err) {\n                ownProps.handleError(err)\n            }\n        }\n    })\n})(FormedLogin)\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoginWithData)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './PasswordHelp.css'\nimport Logo from '../common/Logo'\nimport ReduxFormField from '../common/FormField'\n\nconst PasswordHelp = ({handleSubmit, tryPasswordHelp, email, cancel}) =>\n    <form className='passwordHelpForm' onSubmit={handleSubmit(tryPasswordHelp)}>\n        <Logo />\n        <ReduxFormField className='email' placeholder='email' name='email' type='email' value={email} />\n        <button className='passwordHelpButton' type='submit'>Reset Password</button>\n        <button className='cancelButton' type='button' onClick={cancel}>Cancel</button>\n    </form>\n\nPasswordHelp.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired,\n    tryPasswordHelp: PropTypes.func.isRequired,\n    email: PropTypes.string\n}\n\nexport default PasswordHelp\n","import {path} from 'ramda'\nimport {connect} from 'react-redux'\nimport {reduxForm} from 'redux-form'\nimport {graphql} from 'react-apollo'\nimport Validator from 'validatorjs'\n\nimport PasswordHelp from './PasswordHelp'\nimport {handleError, cancel, passwordHelp} from './actions'\nimport constants from './constants'\nimport {PASSWORD_RESET} from './mutations'\n\nconst {passwordHelp: {rules, messages}} = constants\n\nconst validate = (values) => {\n    const validator = new Validator(values, rules, messages)\n    validator.passes()\n    return validator.errors.all()\n}\n\nconst mapStateToProps = store => ({\n    email: path(['auth', 'user', 'email'], store)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    cancel() {\n        return dispatch(cancel())\n    },\n    handleError(error) {\n        return dispatch(handleError(error))\n    },\n    passwordHelp(user) {\n        return dispatch(passwordHelp(user))\n    }\n})\n\nconst FormedPasswordHelp = reduxForm({\n    validate,\n    fields: ['email'],\n    form: 'PasswordHelpForm'\n})(PasswordHelp)\n\nconst PasswordHelpWithData = graphql(PASSWORD_RESET, {\n    props: ({mutate, ownProps}) => ({\n        async tryPasswordHelp(user) {\n            try {\n                const {data: {error, passwordReset}} = await mutate({variables: user})\n                if (error) {\n                    throw new Error(error)\n                }\n                if (passwordReset) ownProps.passwordHelp(user)\n            } catch (err) {\n                ownProps.handleError(err)\n            }\n        }\n\n    })\n})(FormedPasswordHelp)\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(PasswordHelpWithData)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Registration.css'\nimport Logo from '../common/Logo'\nimport ReduxFormField from '../common/FormField'\n\nconst Registration = ({handleSubmit, tryRegister, cancel}) =>\n    <form className='registrationForm' onSubmit={handleSubmit(tryRegister)}>\n        <Logo />\n        <p className='instructions'>Register Your Account</p>\n        <ReduxFormField className='name' placeholder='name' name='name' />\n        <ReduxFormField className='email' placeholder='email' name='email' type='email' />\n        <ReduxFormField className='password' placeholder='password' type='password' name='password' />\n        <button className='registrationButton' type='submit'>Register</button>\n        <button className='cancelButton' type='button' onClick={cancel}>Cancel</button>\n    </form>\n\nRegistration.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired,\n    tryRegister: PropTypes.func.isRequired\n}\n\nexport default Registration\n","import {connect} from 'react-redux'\nimport {reduxForm} from 'redux-form'\nimport {graphql} from 'react-apollo'\nimport Validator from 'validatorjs'\n\nimport Registration from './Registration'\nimport {handleError, cancel, registerUser} from './actions'\nimport constants from './constants'\nimport {REGISTER_USER} from './mutations'\n\nconst {registerUser: {rules, messages}} = constants\n\nconst validate = (values) => {\n    const validator = new Validator(values, rules, messages)\n    validator.passes()\n    return validator.errors.all()\n}\n\nconst mapDispatchToProps = dispatch => ({\n    handleError(error) {\n        return dispatch(handleError(error))\n    },\n    cancel() {\n        return dispatch(cancel())\n    },\n    registerUser(user) {\n        return dispatch(registerUser(user))\n    }\n})\n\nconst FormedRegistration = reduxForm({\n    validate,\n    fields: ['password', 'email', 'name'],\n    form: 'RegistrationForm'\n})(Registration)\n\nconst RegistrationWithData = graphql(REGISTER_USER, {\n    props: ({ownProps, mutate}) => ({\n        async tryRegister(user) {\n            try {\n                const {data: {error, registerUser}} = await mutate({variables: user})\n                if (error) {\n                    throw new Error(error)\n                }\n                if (registerUser) ownProps.registerUser(user)\n            } catch (err) {\n                ownProps.handleError(err)\n            }\n        }\n    })\n})(FormedRegistration)\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(RegistrationWithData)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './RegisterApplication.css'\nimport Logo from '../common/Logo'\nimport ReduxFormField from '../common/FormField'\n\nconst RegisterApplication = ({handleSubmit, tryRegisterApp, cancel}) =>\n    <form className='registerApplication' onSubmit={handleSubmit(tryRegisterApp)}>\n        <Logo />\n        <p className='instructions'>Register Your Application</p>\n        <ReduxFormField className='applicationName' placeholder='name' name='name' />\n        <ReduxFormField className='redirect' placeholder='redirects to' name='redirect' type='url' />\n        <button className='registerApplicationButton' type='submit'>Register</button>\n        <button className='cancelButton' type='button' onClick={cancel}>Cancel</button>\n    </form>\n\nRegisterApplication.propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired,\n    tryRegisterApp: PropTypes.func.isRequired\n}\n\nexport default RegisterApplication\n","import {connect} from 'react-redux'\nimport {reduxForm} from 'redux-form'\nimport {graphql} from 'react-apollo'\nimport Validator from 'validatorjs'\n\nimport RegisterApplication from './RegisterApplication'\nimport {registerApp, cancel} from './actions'\nimport constants from './constants'\nimport {REGISTER_APP} from './mutations'\n\nconst {registerApplication: {rules, messages}} = constants\n\nconst validate = (values) => {\n    const validator = new Validator(values, rules, messages)\n    validator.passes()\n    return validator.errors.all()\n}\n\nconst mapDispatchToProps = dispatch => ({\n    cancel() {\n        return dispatch(cancel())\n    },\n    registerApplication(app) {\n        return dispatch(registerApp(app))\n    }\n})\n\nconst FormedApplication = reduxForm({\n    validate,\n    fields: ['name', 'redirect'],\n    form: 'ApplicationRegistrationForm'\n})(RegisterApplication)\n\nconst RegisterApplicationWithData = graphql(REGISTER_APP, {\n    props: ({mutate, ownProps}) => ({\n        async tryRegisterApp(app) {\n            const success = await mutate({variables: app})\n            if (success) ownProps.registerApplication(app)\n        }\n    })\n})(FormedApplication)\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(RegisterApplicationWithData)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Login from './Login.container'\nimport PasswordHelp from './PasswordHelp.container'\nimport Registration from './Registration.container'\nimport RegisterApplication from './RegisterApplication.container'\n\nconst Router = ({route}) => {\n    const ROUTE = route.toUpperCase().replace(/\\//g, '')\n    switch (ROUTE) {\n        case 'LOGIN':\n            return <Login />\n        case 'REGISTRATION':\n            return <Registration />\n        case 'APPLICATION':\n            return <RegisterApplication />\n        case 'PASSWORD-HELP':\n            return <PasswordHelp />\n        default:\n            return <Login />\n    }\n}\n\nRouter.propTypes = {\n    route: PropTypes.string.isRequired\n}\n\nRouter.defaultProps = {\n    route: ''\n}\n\nexport default Router\n","import {connect} from 'react-redux'\n\nimport Routes from './Routes'\n\nexport default connect(store => ({route: store.auth.route}))(Routes)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport Routes from './Routes.container'\n\nconst Auth = ({isLoggedIn, children}) =>\n    (isLoggedIn ? children : <Routes />)\n\nAuth.propTypes = {\n    children: PropTypes.node,\n    isLoggedIn: PropTypes.bool.isRequired\n}\n\nAuth.defaultProps = {\n    children: null,\n    isLoggedIn: false\n}\n\nexport default Auth\n","import {path} from 'ramda'\nimport {connect} from 'react-redux'\n\nimport Auth from './Auth'\n\nexport default connect(store => ({\n    isLoggedIn: !!path(['auth', 'user', 'token', 'access_token'], store)\n}))(Auth)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ApolloProvider} from 'react-apollo'\n\nimport createClient from './apollo.client'\nimport Auth from './Auth.container'\n\nconst AuthProvider = (props) =>\n    <ApolloProvider client={createClient({...props})} {...props}>\n        <Auth {...props} />\n    </ApolloProvider>\n\nAuthProvider.propTypes = {\n    baseUrl: PropTypes.string.isRequired,\n    children: PropTypes.node,\n    parseTokenFromStorage: PropTypes.bool.isRequired,\n    useSubscriptionsToo: PropTypes.bool.isRequired\n}\n\nAuthProvider.defaultProps = {\n    baseUrl: 'localhost',\n    parseTokenFromStorage: true,\n    useSubscriptionsToo: true\n}\n\nexport default AuthProvider\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Logout.css'\n\nconst Logout = ({tryLogout}) =>\n    <button onClick={tryLogout} className='logoutButton' type='button'>Logout</button>\n\nLogout.propTypes = {\n    tryLogout: PropTypes.func.isRequired\n}\n\nexport default Logout\n","import AuthProvider from './AuthProvider'\nimport Login from './Login'\nimport Logout from './Logout'\nimport PasswordHelp from './PasswordHelp'\nimport Registration from './Registration'\nimport RegisterApplication from './RegisterApplication'\n\nexport default {\n    AuthProvider,\n    Login,\n    Logout,\n    PasswordHelp,\n    Registration,\n    RegisterApplication\n}\n"],"names":["baseUrl","useSubscriptionsToo","parseTokenFromStorage","networkInterface","createNetworkInterface","uri","use","req","next","path","options","headers","localStorage","getItem","wsClient","SubscriptionClient","reconnect","ApolloClient","addGraphQLSubscriptions","Logo","logo","src","props","global","rng","bytesToUuid","isCheck","test","type","isNotNil","complement","isNil","InputField","propTypes","PropTypes","string","oneOf","defaultProps","FormField","handlers","input","id","meta","touched","error","label","name","placeholder","value","className","pickBy","shape","func","bool","arrayOf","element","oneOfType","number","ReduxFormField","isRequired","uuid","Login","handleSubmit","tryLogin","email","gotoPasswordHelp","gotoRegistration","cancel","types","CANCEL","handleError","ERROR","GOTO_PASSWORD_HELP","GOTO_REGISTRATION","passwordHelp","PASSWORD_HELP","registerUser","user","REGISTER_USER","registerApp","app","REGISTER_APP","login","LOGIN","PASSWORD_PATTERN","RegExp","LocalizedStrings","LOGIN_USER","gql","LOGOUT_USER","PASSWORD_RESET","REFRESH_TOKEN","REGISTER_SUPER_USER","constants","rules","messages","validate","values","validator","Validator","passes","errors","all","mapStateToProps","state","mapDispatchToProps","dispatch","e","preventDefault","FormedLogin","reduxForm","LoginWithData","graphql","ownProps","mutate","credentials","variables","data","loginUser","Error","token","redirect_uri","location","includes","toPairs","without","map","key","val","join","err","connect","PasswordHelp","tryPasswordHelp","FormedPasswordHelp","PasswordHelpWithData","passwordReset","Registration","tryRegister","FormedRegistration","RegistrationWithData","RegisterApplication","tryRegisterApp","registerApplication","FormedApplication","RegisterApplicationWithData","success","Router","route","ROUTE","toUpperCase","replace","store","auth","Routes","Auth","isLoggedIn","children","node","AuthProvider","createClient","Logout","tryLogout"],"mappings":"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"}